<?xml version="1.0"?>
<doc>
    <assembly>
        <name>atelier2</name>
    </assembly>
    <members>
        <member name="T:atelier2.bddmanager.BddManager">
            <summary>
            Singleton : connexion à la base de données et exécution des requêtes
            </summary>
        </member>
        <member name="F:atelier2.bddmanager.BddManager.instance">
            <summary>
            instance unique de la classe
            </summary>
        </member>
        <member name="F:atelier2.bddmanager.BddManager.connection">
            <summary>
            objet de connexion à la BDD à partir d'une chaîne de connexion
            </summary>
        </member>
        <member name="M:atelier2.bddmanager.BddManager.#ctor(System.String)">
            <summary>
            Constructeur pour créer la connexion à la BDD et l'ouvrir
            </summary>
            <param name="stringConnect">chaine de connexion</param>
        </member>
        <member name="M:atelier2.bddmanager.BddManager.GetInstance(System.String)">
            <summary>
            Création d'une seule instance de la classe
            </summary>
            <param name="stringConnect">chaine de connexion</param>
            <returns>instance unique de la classe</returns>
        </member>
        <member name="M:atelier2.bddmanager.BddManager.ReqUpdate(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Exécution d'une requête autre que "select"
            </summary>
            <param name="stringQuery">requête autre que select</param>
            <param name="parameters">dictionnire contenant les parametres</param>
        </member>
        <member name="M:atelier2.bddmanager.BddManager.ReqSelect(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Execution d'une requête de type "select"
            </summary>
            <param name="stringQuery">requête select</param>
            <param name="parameters">dictoinnaire contenant les parametres</param>
            <returns>liste de tableaux d'objets contenant les valeurs des colonnes</returns>
        </member>
        <member name="T:atelier2.controller.FmrAuthController">
            <summary>
            Contrôleur de FmrAuth
            </summary>
        </member>
        <member name="F:atelier2.controller.FmrAuthController.connectionAccess">
            <summary>
            objet d'accès a la verification login mot de passe
            </summary>
        </member>
        <member name="F:atelier2.controller.FmrAuthController.gestion">
            <summary>
            vu du systeme de gestion du personnel et de leurs absences 
            </summary>
        </member>
        <member name="M:atelier2.controller.FmrAuthController.#ctor">
            <summary>
            Récupère les acces aux données
            </summary>
        </member>
        <member name="M:atelier2.controller.FmrAuthController.GetLaConnection(System.String,System.String)">
            <summary>
            Valide ou non l'authentification login pwd du responsable
            Si valide lance la fenêtre de gestion et renvoi vrai
            Sinon valide renvoi false
            </summary>
            <param name="login"></param>
            <param name="psw"></param>
            <returns></returns>
        </member>
        <member name="T:atelier2.controller.FmrGestionController">
            <summary>
            Contôleur de FmrGestion
            </summary>
        </member>
        <member name="F:atelier2.controller.FmrGestionController.personnelAccess">
            <summary>
            objet d'accès aux opérations possibles sur Personnel
            </summary>
        </member>
        <member name="F:atelier2.controller.FmrGestionController.absenceAccess">
            <summary>
            objet d'accès aux opérations possibles sur Absence
            </summary>
        </member>
        <member name="M:atelier2.controller.FmrGestionController.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="T:atelier2.dal.AbsenceAccess">
            <summary>
            Classe permettant de gérer les demandes concernant les absences
            </summary>
        </member>
        <member name="T:atelier2.dal.Access">
            <summary>
            Singleton : classe d'accès à BddManager
            </summary>
        </member>
        <member name="F:atelier2.dal.Access.connectionString">
            <summary>
            chaine de connexion à la bdd
            </summary>
        </member>
        <member name="F:atelier2.dal.Access.instance">
            <summary>
            instance unique de la classe
            </summary>
        </member>
        <member name="P:atelier2.dal.Access.Manager">
            <summary>
            Getter sur l'objet d'accès aux données
            </summary>
        </member>
        <member name="M:atelier2.dal.Access.#ctor">
            <summary>
            Création unique de l'objet de type BddManager
            Arrête le programme si l'accès à la BDD a échoué
            </summary>
        </member>
        <member name="M:atelier2.dal.Access.GetInstance">
            <summary>
            Création d'une seule instance de la classe
            </summary>
            <returns></returns>
        </member>
        <member name="T:atelier2.dal.ConnectionAccess">
            <summary>
            Classe permettant de  gérer les demandes de verification de login et mot de passe
            pour acceder au logiciel de gestion
            </summary>
        </member>
        <member name="F:atelier2.dal.ConnectionAccess.access">
            <summary>
            Instance unique de l'accès aux données
            </summary>
        </member>
        <member name="M:atelier2.dal.ConnectionAccess.#ctor">
            <summary>
            Constructeur pour créer l'accès aux données
            </summary>
        </member>
        <member name="M:atelier2.dal.ConnectionAccess.GetLaConnection(System.String,System.String)">
            <summary>
            retourne vrai si la combinaison mdp pwd existe dans la base de données
            </summary>
            <param name="login"></param>
            <param name="pwd"></param>
            <returns>vrai ou faux</returns>
        </member>
        <member name="T:atelier2.dal.PersonnelAccess">
            <summary>
            Classe permettant de gérer les demandes concernant les absences
            </summary>
        </member>
        <member name="F:atelier2.dal.PersonnelAccess.access">
            <summary>
            Instance unique de l'accès aux données
            </summary>
        </member>
        <member name="M:atelier2.dal.PersonnelAccess.#ctor">
            <summary>
            Constructeur pour créer l'accès aux données
            </summary>
        </member>
        <member name="T:atelier2.model.Absence">
            <summary>
            Classe métier liée à la table Absence
            </summary>
        </member>
        <member name="M:atelier2.model.Absence.#ctor(System.Int32,System.DateTime,System.DateTime,atelier2.model.Motif)">
            <summary>
            Valorise les propriétés
            </summary>
            <param name="idpersonnel"></param>
            <param name="datedebut"></param>
            <param name="datefin"></param>
            <param name="motif"></param>
        </member>
        <member name="T:atelier2.model.Motif">
            <summary>
            Classe métier liée à la table Motif
            </summary>
        </member>
        <member name="M:atelier2.model.Motif.#ctor(System.Int32,System.String)">
            <summary>
            Valorise les propriétés
            </summary>
            <param name="idmotif"></param>
            <param name="libelle"></param>
        </member>
        <member name="M:atelier2.model.Motif.ToString">
            <summary>
            Définit l'information à afficher (juste le nom)
            </summary>
            <returns></returns>
        </member>
        <member name="T:atelier2.model.Personnel">
            <summary>
             Classe métier liée à la table Personnel
            </summary>
        </member>
        <member name="M:atelier2.model.Personnel.#ctor(System.Int32,System.String,System.String,System.String,System.String,atelier2.model.Service)">
            <summary>
            Valorise les propriétés
            </summary>
            <param name="idpersonnel"></param>
            <param name="nom"></param>
            <param name="prenom"></param>
            <param name="tel"></param>
            <param name="mail"></param>
            <param name="service"></param>
        </member>
        <member name="T:atelier2.model.Service">
            <summary>
            Classe métier liée à la table Service
            </summary>
        </member>
        <member name="M:atelier2.model.Service.#ctor(System.Int32,System.String)">
            <summary>
            Valorise les propriétés
            </summary>
            <param name="idservice"></param>
            <param name="nom"></param>
        </member>
        <member name="M:atelier2.model.Service.ToString">
            <summary>
            Définit l'information à afficher (juste le nom)
            </summary>
            <returns></returns>
        </member>
        <member name="T:atelier2.FmrAuth">
            <summary>
            Fenêtre de connection
            </summary>
        </member>
        <member name="M:atelier2.FmrAuth.#ctor">
            <summary>
            construction des composants graphiques 
            </summary>
        </member>
        <member name="M:atelier2.FmrAuth.Init">
            <summary>
            Initialisations :
            Création du controleur
            </summary>
        </member>
        <member name="M:atelier2.FmrAuth.BtnConnec_Click(System.Object,System.EventArgs)">
            <summary>
            Demande de connection
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:atelier2.FmrAuth.components">
            <summary>
            Variable nécessaire au concepteur.
            </summary>
        </member>
        <member name="M:atelier2.FmrAuth.Dispose(System.Boolean)">
            <summary>
            Nettoyage des ressources utilisées.
            </summary>
            <param name="disposing">true si les ressources managées doivent être supprimées ; sinon, false.</param>
        </member>
        <member name="M:atelier2.FmrAuth.InitializeComponent">
            <summary>
            Méthode requise pour la prise en charge du concepteur - ne modifiez pas
            le contenu de cette méthode avec l'éditeur de code.
            </summary>
        </member>
        <member name="M:atelier2.Program.Main">
            <summary>
            Point d'entrée principal de l'application.
            </summary>
        </member>
        <member name="T:atelier2.view.FmrGestion">
            <summary>
            Fenêtre d'affichage du personnel et des absences
            </summary>
        </member>
        <member name="M:atelier2.view.FmrGestion.#ctor">
            <summary>
            construction des composants graphiques et appel des autres initialisations
            </summary>
        </member>
        <member name="M:atelier2.view.FmrGestion.MainForm_FormClosing(System.Object,System.Windows.Forms.FormClosingEventArgs)">
            <summary>
            Arrête le programme
            quand on ferme la fenêtre 
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="F:atelier2.view.FmrGestion.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:atelier2.view.FmrGestion.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:atelier2.view.FmrGestion.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:atelier2.Properties.Resources">
            <summary>
              Une classe de ressource fortement typée destinée, entre autres, à la consultation des chaînes localisées.
            </summary>
        </member>
        <member name="P:atelier2.Properties.Resources.ResourceManager">
            <summary>
              Retourne l'instance ResourceManager mise en cache utilisée par cette classe.
            </summary>
        </member>
        <member name="P:atelier2.Properties.Resources.Culture">
            <summary>
              Remplace la propriété CurrentUICulture du thread actuel pour toutes
              les recherches de ressources à l'aide de cette classe de ressource fortement typée.
            </summary>
        </member>
    </members>
</doc>
